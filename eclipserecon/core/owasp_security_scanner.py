import os
import time
from dotenv import load_dotenv
from zapv2 import ZAPv2
import json
from eclipserecon.utils.logger import appLogger

class OwaspSecurityScanner:
    """
    Class to manage web scanning using OWASP ZAP.

    Attributes:
        zap (ZAPv2): Instance of the ZAP API.
        proxies (dict): Dictionary containing proxy settings for ZAP.
    """
    
    RISK_MAPPING = {
        'Informational': 0,
        'Low': 1,
        'Medium': 2,
        'High': 3
    }

    def __init__(self, proxies: dict = None):
        """
        Initializes OwaspSecurityScanner and sets up the ZAP instance,
        and optionally accepts proxy settings.

        Args:
            proxies (dict, optional): A dictionary with proxy settings (e.g., {'http': 'http://127.0.0.1:8080'}). Defaults to None.
        
        Raises:
            ValueError: If the API key is not found in the environment variables.
        """
        load_dotenv()

        api_key = os.getenv('ZAP_API_KEY')
        if not api_key:
            raise ValueError("API key not found. Ensure ZAP_API_KEY is defined in the .env file.")
        
        # Set the default proxy if no proxy is provided
        self.proxies = proxies or {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}
        self.zap = ZAPv2(apikey=api_key, proxies=self.proxies)

    def perform_full_scan(self, target_url: str) -> str:
        """
        Perform both passive and active scans sequentially on the target URL.

        Args:
            target_url (str): The target URL for scanning.

        Returns:
            str: A JSON string containing the results of the scans.
        """
        results = {}
        try:
            appLogger.info(f"Initiating scan on {target_url}...")

            appLogger.info("Commencing passive scan... ðŸš¨")
            passive_scan_results = self._passive_scan(target_url)
            results['passive_scan'] = self._organize_alerts(passive_scan_results)

            appLogger.info("Commencing active scan... ðŸ”¥")
            active_scan_results = self._active_scan(target_url)
            results['active_scan'] = self._organize_alerts(active_scan_results)

            appLogger.info("Scanning completed successfully. All threats logged. ðŸ’€")

        except Exception as e:
            appLogger.error(f"Scan failed! Error: {str(e)}")
            results['error'] = str(e)
        
        return json.dumps(results, indent=4)

    def _passive_scan(self, target_url: str) -> list:
        """
        Performs a passive scan on the target URL.

        Args:
            target_url (str): The target URL for scanning.

        Returns:
            list: List of alerts generated by the passive scan.
        """
        self.zap.pscan.enable_all_scanners()
        self.zap.urlopen(target_url)
        
        appLogger.info("Passive scan in progress...")
        while int(self.zap.pscan.records_to_scan) > 0:
            time.sleep(2)

        appLogger.info("Passive scan completed. ðŸš¨")
        return self.zap.core.alerts()

    def _active_scan(self, target_url: str) -> list:
        """
        Performs an active scan on the target URL.

        Args:
            target_url (str): The target URL for scanning.

        Returns:
            list: List of alerts generated by the active scan.
        """
        appLogger.info("Spidering the target... ðŸ¤–")
        scan_id = self.zap.spider.scan(target_url)

        appLogger.info("Spidering in progress...")
        while int(self.zap.spider.status(scan_id)) < 100:
            time.sleep(2)

        appLogger.info("Spidering completed. Initiating active scan... ðŸ’£")
        scan_id = self.zap.ascan.scan(target_url)

        appLogger.info("Active scan in progress...")
        while int(self.zap.ascan.status(scan_id)) < 100:
            time.sleep(2)

        appLogger.info("Active scan completed. ðŸ’€")
        return self.zap.core.alerts()

    def _organize_alerts(self, alerts: list) -> list:
        """
        Organizes and structures the alerts from the scan.

        Args:
            alerts (list): List of alerts generated by the scan.

        Returns:
            list: A list of organized alerts sorted by risk level.
        """
        alerts_sorted = sorted(alerts, key=lambda x: self.RISK_MAPPING.get(x['risk'], -1), reverse=True)
        organized_alerts = []
        for alert in alerts_sorted:
            organized_alerts.append({
                "alert": alert['alert'],
                "risk": alert['risk'],
                "url": alert['url'],
                "description": alert['description'],
                "solution": alert['solution']
            })
        return organized_alerts